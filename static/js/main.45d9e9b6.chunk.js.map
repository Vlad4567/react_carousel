{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","itemWidth","frameSize","step","animationDuration","infinity","useState","vision","setVision","lastVision","length","styleImage","width","height","styleCarouselList","styleCarouselLi","transform","transition","isDisabledPrevHandle","isDisabledNextHandle","className","style","map","image","index","src","alt","type","disabled","onClick","cur","Math","max","min","defaultOptions","App","options","setOptions","Object","keys","selectInput","setSelectInput","handleInputChange","event","target","name","value","checked","prevProp","convertToTitleCase","str","replace","toLowerCase","l","toUpperCase","onChange","key","entries","option","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45d9e9b6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinity: boolean;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinity,\n}) => {\n  const [vision, setVision] = useState(0);\n  const imagesLength = images.length;\n  const lastVision = imagesLength - frameSize;\n\n  const styleImage: React.CSSProperties = {\n    width: `${itemWidth}px`,\n    height: `${itemWidth}px`,\n  };\n\n  const styleCarouselList: React.CSSProperties = {\n    width: `${itemWidth * frameSize}px`,\n  };\n\n  const styleCarouselLi: React.CSSProperties = {\n    transform: `translateX(${-vision * itemWidth}px)`,\n    transition: `transform ${animationDuration}ms`,\n  };\n\n  const handlePrevClick = () => {\n    if (infinity && vision <= 0) {\n      setVision(lastVision);\n    } else {\n      setVision((cur) => Math.max(cur - step, 0));\n    }\n  };\n\n  const handleNextClick = () => {\n    if (infinity && vision >= lastVision) {\n      setVision(0);\n    } else {\n      setVision((cur) => Math.min(cur + step, lastVision));\n    }\n  };\n\n  const isDisabledPrevHandle = infinity ? false : vision <= 0;\n  const isDisabledNextHandle = infinity ? false : vision >= lastVision;\n\n  return (\n    <div className=\"Carousel\">\n      <ul style={styleCarouselList} className=\"Carousel__list\">\n        {images.map((image, index) => (\n          <li key={image} className=\"Carousel__item\" style={styleCarouselLi}>\n            <img style={styleImage} src={image} alt={`${index + 1}`} />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"Carousel__btns\">\n        <button\n          type=\"button\"\n          disabled={isDisabledPrevHandle}\n          onClick={handlePrevClick}\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          disabled={isDisabledNextHandle}\n          onClick={handleNextClick}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\ninterface DefaultOptions {\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinity: boolean;\n}\n\nconst defaultOptions: DefaultOptions = {\n  itemWidth: 130,\n  frameSize: 3,\n  step: 3,\n  animationDuration: 1000,\n  infinity: false,\n};\n\nconst App: React.FC = () => {\n  const [options, setOptions] = useState<DefaultOptions>(defaultOptions);\n  const [selectInput, setSelectInput] = useState(\n    Object.keys(options)[0] || null,\n  );\n\n  const {\n    itemWidth,\n    frameSize,\n    step,\n    animationDuration,\n    infinity,\n  } = options;\n\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const {\n      name,\n      value,\n      type,\n      checked,\n    } = event.target;\n\n    switch (type) {\n      case 'number':\n        setOptions((prevProp) => ({\n          ...prevProp,\n          [name]: +value,\n        }));\n        break;\n\n      case 'checkbox':\n        setOptions((prevProp) => ({\n          ...prevProp,\n          [name]: checked,\n        }));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function handleSelectionChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const { value } = event.target;\n\n    setSelectInput(value);\n  }\n\n  function convertToTitleCase(str: string): string {\n    return str\n      .replace(/([A-Z])/g, ' $1')\n      .toLowerCase()\n      .replace(/^./, (l) => l.toUpperCase());\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n\n      {selectInput && (\n        <div className=\"options\">\n          <select\n            name=\"input\"\n            value={selectInput}\n            onChange={handleSelectionChange}\n          >\n            {Object.keys(options).map((key) => (\n              <option key={key} value={key}>\n                {convertToTitleCase(key)}\n              </option>\n            ))}\n          </select>\n\n          {Object.entries(options).map(([option, value]) => {\n            const typeValue = typeof value;\n\n            if (option !== selectInput) {\n              return false;\n            }\n\n            switch (typeValue) {\n              case 'number':\n                return (\n                  <React.Fragment key={option}>\n                    <h3>{`${convertToTitleCase(option)}:`}</h3>\n                    <input\n                      type=\"number\"\n                      name={`${option}`}\n                      value={value}\n                      min=\"0\"\n                      onChange={handleInputChange}\n                    />\n                  </React.Fragment>\n                );\n\n              case 'boolean':\n                return (\n                  <React.Fragment key={option}>\n                    <h3>{`${convertToTitleCase(option)}:`}</h3>\n                    <input\n                      type=\"checkbox\"\n                      name={`${option}`}\n                      checked={value}\n                      onChange={handleInputChange}\n                    />\n                  </React.Fragment>\n                );\n\n              default:\n                return false;\n            }\n          })}\n        </div>\n      )}\n\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinity={infinity}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}